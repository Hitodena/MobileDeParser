#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ _apply_image_exclusions –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã
"""


def test_image_exclusions():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    # –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (10 —à—Ç—É–∫)
    original_images = [
        "image_001.jpg",
        "image_002.jpg",
        "image_003.jpg",
        "image_004.jpg",
        "image_005.jpg",
        "image_006.jpg",
        "image_007.jpg",
        "image_008.jpg",
        "image_009.jpg",
        "image_010.jpg",
    ]

    # –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ
    exclusion_rules = {
        "Autohaus Sedlmaier GmbH & Co. KG": {
            "start": "1",
            "penultimate": "*",
            "last": "*",
        },
        "Autohaus Schmidt & S√∂hne Aschersleben GmbH & Co. KG": {
            "start": "1",
            "penultimate": "",
            "last": "",
        },
    }

    print("=== –¢–ï–°–¢ –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===\n")
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ({len(original_images)} —à—Ç—É–∫):")
    for i, img in enumerate(original_images, 1):
        print(f"  {i:2d}. {img}")
    print()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–∏–ª–µ—Ä–∞
    for dealer, rules in exclusion_rules.items():
        print(f"üè™ –î–ò–õ–ï–†: {dealer}")
        print(f"üìã –ü–†–ê–í–ò–õ–ê: {rules}")

        # –≠–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ _apply_image_exclusions
        result = original_images.copy()
        removed_images = []

        print(f"\nüì∏ –ù–∞—á–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(result)} —à—Ç—É–∫")

        # –®–∞–≥ 1: –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ç–∫—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–∞
        last = rules.get("last", "")
        if last == "*" and len(result) >= 1:
            removed_image = result.pop(-1)
            removed_images.append(f"–ø–æ—Å–ª–µ–¥–Ω—è—è (–ø–æ–∑–∏—Ü–∏—è {len(result) + 1})")
            print(f"  ‚ùå –£–¥–∞–ª—è–µ–º –ü–û–°–õ–ï–î–ù–Æ–Æ: {removed_image}")
            print(f"     –û—Å—Ç–∞–ª–æ—Å—å: {len(result)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

        # –®–∞–≥ 2: –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ç–∫—É –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–∞
        penultimate = rules.get("penultimate", "")
        if penultimate == "*" and len(result) >= 2:
            removed_image = result.pop(-2)
            removed_images.append(f"–ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è (–ø–æ–∑–∏—Ü–∏—è {len(result) + 1})")
            print(f"  ‚ùå –£–¥–∞–ª—è–µ–º –ü–†–ï–î–ü–û–°–õ–ï–î–ù–Æ–Æ: {removed_image}")
            print(f"     –û—Å—Ç–∞–ª–æ—Å—å: {len(result)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

        # –®–∞–≥ 3: –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–∫–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º –∏–∑ –Ω–∞—á–∞–ª–∞
        start_remove = rules.get("start", "")
        if start_remove and start_remove.strip():
            positions_to_remove = []

            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–∞
            for pos_str in start_remove.split(","):
                pos_str = pos_str.strip()
                if pos_str.isdigit():
                    pos = int(pos_str)
                    if pos > 0:  # –ü–æ–∑–∏—Ü–∏–∏ –≤ CSV –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1
                        index = (
                            pos - 1
                        )  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0)
                        if index < len(result):
                            positions_to_remove.append(index)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é, —á—Ç–æ–±—ã —É–¥–∞–ª—è—Ç—å —Å –∫–æ–Ω—Ü–∞
            positions_to_remove.sort(reverse=True)

            for index in positions_to_remove:
                if index < len(result):
                    removed_image = result.pop(index)
                    removed_images.append(f"–ø–æ–∑–∏—Ü–∏—è {index + 1}")
                    print(f"  ‚ùå –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é {index + 1}: {removed_image}")
                    print(f"     –û—Å—Ç–∞–ª–æ—Å—å: {len(result)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

        print(f"\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –¥–ª—è {dealer}:")
        print(f"   –ò—Å—Ö–æ–¥–Ω–æ: {len(original_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        print(
            f"   –£–¥–∞–ª–µ–Ω–æ: {len(removed_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - {', '.join(removed_images)}"
        )
        print(f"   –û—Å—Ç–∞–ª–æ—Å—å: {len(result)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

        if result:
            print(f"   –ò—Ç–æ–≥–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
            for i, img in enumerate(result, 1):
                print(f"     {i:2d}. {img}")
        else:
            print(f"   ‚ö†Ô∏è –ù–ï–¢ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô!")

        print("\n" + "=" * 80 + "\n")


def test_multiple_positions():
    """–¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –≤ start"""

    original_images = [f"photo_{i:03d}.jpg" for i in range(1, 11)]  # 10 —Ñ–æ—Ç–æ–∫

    print("=== –¢–ï–°–¢ –° –ù–ï–°–ö–û–õ–¨–ö–ò–ú–ò –ü–û–ó–ò–¶–ò–Ø–ú–ò ===\n")
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ({len(original_images)} —à—Ç—É–∫):")
    for i, img in enumerate(original_images, 1):
        print(f"  {i:2d}. {img}")
    print()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–æ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
    rules = {"start": "1,3,7", "penultimate": "*", "last": "*"}
    print(f"üìã –ü–†–ê–í–ò–õ–ê: {rules}")
    print(f"   start: '1,3,7' - —É–¥–∞–ª—è–µ–º 1-—é, 3-—é –∏ 7-—é —Ñ–æ—Ç–∫–∏")
    print(f"   penultimate: '*' - —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é")
    print(f"   last: '*' - —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é\n")

    result = original_images.copy()
    removed_images = []

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
    if len(result) >= 1:
        removed_image = result.pop(-1)
        removed_images.append(f"–ø–æ—Å–ª–µ–¥–Ω—è—è")
        print(
            f"‚ùå –£–¥–∞–ª—è–µ–º –ü–û–°–õ–ï–î–ù–Æ–Æ: {removed_image} (–±—ã–ª–æ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {len(result) + 1})"
        )

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é
    if len(result) >= 2:
        removed_image = result.pop(-2)
        removed_images.append(f"–ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—è—è")
        print(
            f"‚ùå –£–¥–∞–ª—è–µ–º –ü–†–ï–î–ü–û–°–õ–ï–î–ù–Æ–Æ: {removed_image} (–±—ã–ª–æ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ {len(result) + 1})"
        )

    # –£–¥–∞–ª—è–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏—è–º 1,3,7
    positions_to_remove = [0, 2, 6]  # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–π 1,3,7
    positions_to_remove.sort(reverse=True)  # [6, 2, 0]

    for index in positions_to_remove:
        if index < len(result):
            removed_image = result.pop(index)
            removed_images.append(f"–ø–æ–∑–∏—Ü–∏—è {index + 1}")
            print(f"‚ùå –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é {index + 1}: {removed_image}")

    print(f"\n‚úÖ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
    print(f"   –ò—Å—Ö–æ–¥–Ω–æ: {len(original_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"   –£–¥–∞–ª–µ–Ω–æ: {len(removed_images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"   –û—Å—Ç–∞–ª–æ—Å—å: {len(result)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    if result:
        print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
        for i, img in enumerate(result, 1):
            print(f"     {i:2d}. {img}")


if __name__ == "__main__":
    test_image_exclusions()
    test_multiple_positions()
