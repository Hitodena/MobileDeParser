from aiogram import Router
from aiogram.filters import Command
from aiogram.types import BotCommand, Message
from loguru import logger

from bot.models.bot_config import BotConfig
from bot.services.parser_manager import ParserManager


class CommandHandlers:
    def __init__(self, config: BotConfig, parser_manager: ParserManager):
        self.config = config
        self.parser_manager = parser_manager
        self.router = Router()
        self._setup_handlers()

    def _setup_handlers(self):
        self.router.message.register(self.start_command, Command("start"))
        self.router.message.register(self.stop_command, Command("stop"))
        self.router.message.register(self.status_command, Command("status"))
        self.router.message.register(self.help_command, Command("help"))

    async def start_command(self, message: Message):
        result = await self.parser_manager.start_parsing(message.chat.id)
        await message.answer(f"üöÄ {result}")

    async def stop_command(self, message: Message):
        await self.parser_manager.stop_parsing()
        await message.answer("‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def status_command(self, message: Message):
        status = self.parser_manager.get_status()
        status_text = (
            f"üìä –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞:\n\n"
            f"üîÑ –†–∞–±–æ—Ç–∞–µ—Ç: {'–î–∞' if status.is_running else '–ù–µ—Ç'}\n"
            f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {status.interval_seconds} —Å–µ–∫\n"
            f"üîÑ –¶–∏–∫–ª: {'–í–∫–ª—é—á–µ–Ω' if status.cycle_enabled else '–û—Ç–∫–ª—é—á–µ–Ω'}\n"
            f"‚ö° –ú–∞–∫—Å. –ø–æ—Ç–æ–∫–æ–≤: {status.max_concurrency}"
        )
        await message.answer(status_text)

    async def help_command(self, message: Message):
        help_text = (
            "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
            "üöÄ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ Mobile.de\n"
            "‚èπÔ∏è /stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π –ø–∞—Ä—Å–∏–Ω–≥\n"
            "üìä /status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞\n"
            "‚ùì /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∞—Ä—Ö–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."
        )
        await message.answer(help_text)

    async def setup_commands(self, bot):
        commands = [
            BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"),
            BotCommand(command="stop", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"),
            BotCommand(command="status", description="–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞"),
            BotCommand(command="help", description="–°–ø—Ä–∞–≤–∫–∞"),
        ]

        try:
            await bot.set_my_commands(commands)
            logger.info("Bot commands set successfully")
        except Exception as e:
            logger.error(f"Failed to set bot commands: {e}")
